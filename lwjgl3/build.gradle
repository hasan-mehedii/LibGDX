buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath "io.github.fourlastor:construo:1.5.1"
    if (enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

plugins {
  id "application"
}
apply plugin: 'io.github.fourlastor.construo'

import io.github.fourlastor.construo.Target

// Resources directory for assets
sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]

// Main class for the application
mainClassName = 'com.gdx.game.lwjgl3.Lwjgl3Launcher'
application.setMainClass(mainClassName)

// Eclipse project name
eclipse.project.name = appName + '-lwjgl3'

// Java version compatibility
java.sourceCompatibility = 21
java.targetCompatibility = 21
if (JavaVersion.current().isJava9Compatible()) {
  compileJava.options.release.set(21)
}

dependencies {
  // LibGDX dependencies for LWJGL3 backend
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation project(':core')

  // Graal Native dependencies if enabled
  if (enableGraalNative == 'true') {
    implementation "io.github.berstanio:gdx-svmhelper-backend-lwjgl3:$graalHelperVersion"
  }
}

// Detect the OS to adjust configuration accordingly
def os = System.properties['os.name'].toLowerCase()

// Run configuration
run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  // macOS specific JVM argument
  if (os.contains('mac')) jvmArgs += "-XstartOnFirstThread"
}

// JAR configuration
jar {
  // Sets the name of the JAR file
  archiveFileName.set("${appName}-${projectVersion}.jar")

  // Strategy to exclude duplicates
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }

  // Exclude unnecessary files in the JAR
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }

  // Set the main class in the manifest
  manifest {
    attributes 'Main-Class': project.mainClassName
  }

  // Make the JAR executable
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

// Construe configuration for packaging native images
construo {
  // Name of the executable
  name.set(appName)
  // Human-readable name for macOS
  humanName.set(appName)
  // Version of the application
  version.set("$projectVersion")

  // Target configurations for different platforms
  targets.configure {
    create("linuxX64", Target.Linux) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.12_7.tar.gz")
    }

    create("macM1", Target.MacOs) {
      architecture.set(Target.Architecture.AARCH64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_aarch64_mac_hotspot_17.0.12_7.tar.gz")
      identifier.set("com.gdx.game." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }

    create("macX64", Target.MacOs) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_mac_hotspot_17.0.12_7.tar.gz")
      identifier.set("com.gdx.game." + appName)
      macIcon.set(project.file("icons/logo.icns"))
    }

    create("winX64", Target.Windows) {
      architecture.set(Target.Architecture.X86_64)
      jdkUrl.set("https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.12%2B7/OpenJDK17U-jdk_x64_windows_hotspot_17.0.12_7.zip")
    }
  }
}

// Task to create the distribution
tasks.register('dist') {
  dependsOn 'jar'
}

// Distribution settings
distributions {
  main {
    contents {
      into('libs') {
        project.configurations.runtimeClasspath.files.findAll { file ->
          file.getName() != project.tasks.jar.outputs.files.singleFile.name
        }.each { file ->
          exclude file.name
        }
      }
    }
  }
}

// Start scripts configuration
startScripts.dependsOn(':lwjgl3:jar')
startScripts.classpath = project.tasks.jar.outputs.files

// GrailVM Native support
if (enableGraalNative == 'true') {
  apply from: file("native image.gradle")
}
